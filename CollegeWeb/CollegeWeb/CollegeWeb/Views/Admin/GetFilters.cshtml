@model CollegeWeb.Models.SearchModel

@{
    ViewBag.Title = "SearchPage";
}

<h2>SearchPage</h2>
@using (Html.BeginForm())
{


    <div class="container-fluid">
        <h3>Filters:</h3>
        <div class="row">
            <div class="col-sm-6">

                @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })

                <div class="col-sm-6">
                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="col-sm-6">
                @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-sm-6">
                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })

                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    Male: @Html.RadioButtonFor(model => model.Gender, "Male", new { htmlAttributes = new { @class = "form-control" } })
                    Female: @Html.RadioButtonFor(model => model.Gender, "Female", new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                </div>

            </div>
            <div class="col-sm-6">
                @Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-sm-6">
                    @Html.EditorFor(model => model.DateOfBirth, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
                </div>

            </div>

        </div>
        <div class="row">
            <div class="col-sm-6">
                @Html.LabelFor(model => model.Hobbies, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-sm-6">
                    @Html.EditorFor(model => model.Hobbies, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Hobbies, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class=" col-sm-6">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-sm-6">
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-sm-6">
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-sm-6">
                @Html.LabelFor(model => model.IsEmailVerified, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-sm-6">
                    @Html.DropDownListFor(model => model.IsEmailVerified, new List<SelectListItem >
               {new SelectListItem{Text="Yes",Value="Yes"},
               new SelectListItem{Text="No",Value="No"},
               new SelectListItem{Text="Not Verified",Value="Null"}
                    },"....select...."
               )
                    @Html.ValidationMessageFor(model => model.IsEmailVerified, "", new { @class = "text-danger" })



                </div>
            </div>

        </div>
        <div class="row">
            <div class="col-sm-6">
                @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-sm-6">
                    @Html.DropDownListFor(model => model.IsActive, new List<SelectListItem>
                {

                new SelectListItem{ Text="True", Value = "True" },
                new SelectListItem{ Text="False", Value = "False" }
                })
                    @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                </div>
            </div>
            
                <div class="col-sm-6">
                    @Html.LabelFor(model => model.CourseId, "Course", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-sm-6">
                        @Html.DropDownListFor(model => model.CourseId, Model.Courses.Select(x => new SelectListItem
                   {
                       Text = x.CourseName.ToString(),
                       Value = x.CourseId.ToString()
                   }), "...select...")
                        @Html.ValidationMessageFor(model => model.CourseId, "", new { @class = "text-danger" })
                    </div>
                </div>

        </div>
        <div class="row">
            <div class="col-sm-6">
                @Html.LabelFor(model => model.AddressLine, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-sm-6">
                    @Html.TextAreaFor(model => model.AddressLine, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.AddressLine, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-sm-6">
                @Html.LabelFor(model => model.CountryId, "Country", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class-="col-sm-6">
                    @Html.DropDownListFor(model => model.CountryId, Model.Countries.Select(x => new SelectListItem
               {
                   Text = x.CountryName,
                   Value = x.CountryId.ToString()

               }), "...select...", new { htmlAttributes = new { @class = "form-control" }, @Id = "ddlCountry" })
                    @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                @Html.LabelFor(model => model.StateId, "State", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-sm-6">
                    @Html.DropDownListFor(model => model.StateId, Model.States.Select(x => new SelectListItem
               {
                   Text = x.StateName,
                   Value = x.StateId.ToString()
               }),"...select...", new { htmlAttributes = new { @class = "form-control" }, @id = "ddlStateData" })
                    @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-sm-6">
                @Html.LabelFor(model => model.CityId, "City", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.DropDownListFor(model => model.CityId, Model.Cities.Select(x => new SelectListItem
           {
               Text = x.CityName,
               Value = x.CityId.ToString()
           }),"...select...", new { htmlAttributes = new { @class = "form-control" }, @id = "ddlCity" })
                @Html.ValidationMessageFor(model => model.CityId, "", new { @class = "text-danger" })


            </div>

        </div>
        <div class="row">
            <div class="col-sm-6">
                @Html.LabelFor(model => model.Pincode, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-sm-6">
                    @Html.EditorFor(model => model.Pincode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Pincode, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-sm-6">
                @Html.LabelFor(model => model.DateCreated, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-sm-6">
                    @Html.EditorFor(model => model.DateCreated, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DateCreated, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                @Html.LabelFor(model => model.DateModified, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-sm-6">
                    @Html.EditorFor(model => model.DateModified, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DateModified, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-sm-6">
                @Html.LabelFor(model => model.RoleId, "Role", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-sm-6">
                    @Html.DropDownListFor(model => model.RoleId, Model.Roles.Select(x => new SelectListItem
               {
                   Text = x.RoleName,
                   Value = x.RoleId.ToString()
               }), ".....select...")
                    @Html.ValidationMessageFor(model => model.RoleId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Search" class="btn btn-success" data-url="@Url.Action("GetFilters", "Search")" />
                </div>
            </div>

        </div>





        @*calling partial view on button click*@
        <script src="@Url.Content("~/Scripts/jquery.jquery-1.5.1.min.js")" type="text/javascript"></script>
        <script src="@Url.Content("~/Scripts/jquery.unobtrusive-ajax.min.js")" type="text/javascript"></script>
        <script type="text/javascript">
            $(function () {
                $(':button').click(function () {
                    $.ajax({
                        url: $(this).data('url'),
                        type: 'GET',
                        cache: false,
                        success: function (result) {
                            $('#searchpartial').html(result);
                        }
                    });
                    return false;
                });
            });
        </script>

        <div id="searchpartial">
            @{ Html.RenderPartial("~/Views/Shared/_SearchResultPartial.cshtml", Model);
            }
        </div>

    </div>
}
@*Jquery code for dropdown calling*@

<script src="~/Scripts/jquery-3.3.1.min.js"></script>
<script type="text/javascript">

    @*$(document).ready(function () {
        jQuery("#ddlStateData").empty();
        $("#ddlCity").empty();

        var id = $("#ddlCountry").val();
            $.ajax({
                type: 'Post',
                url: '@Url.Action("getState")',
                dataType: 'json',
                data: { Id: id },
                success: function (states) {

                    $.each(states, function (i, state) {
                        $("#ddlStateData").append('<option value="' + state.Value + '">' + state.Text + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve states.' + ex);
                }
            });

    });*@

        $("#ddlCountry").change(function () {

            jQuery("#ddlStateData").empty();
            var id = $("#ddlCountry").val();
            $.ajax({
                type: 'Post',
                url: '@Url.Action("getState")',
                dataType: 'json',
                data: { Id: id },
                success: function (states) {

                    $.each(states, function (i, state) {
                        $("#ddlStateData").append('<option value="' + state.Value + '">' + state.Text + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve states.' + ex);
                }
            });
            return false;
        });

          $("#ddlStateData").change(function () {
                $("#ddlCity").empty();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("getcity")',
                    dataType: 'json',
                    data: { id: $("#ddlStateData").val() },
                    success: function (city) {

                        $.each(city, function (i, city) {
                            $("#ddlCity").append('<option value="'
                                + city.Value + '">'
                                + city.Text + '</option>');
                        });
                    },
                    error: function (ex) {
                        alert('Failed.' + ex);
                    }
                });
                return false;
            });
      //  });
</script>